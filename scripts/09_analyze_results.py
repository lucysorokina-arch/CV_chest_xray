#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
"""

import os
import glob
import matplotlib.pyplot as plt
import numpy as np
from ultralytics import YOLO

def analyze_predictions(model_path, test_dir):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
    print("=" * 50)
    
    model = YOLO(model_path)
    
    results_by_class = {}
    
    for class_name in ["normal", "clavicle_fracture", "foreign_body"]:
        class_path = os.path.join(test_dir, class_name)
        if not os.path.exists(class_path):
            continue
            
        images = glob.glob(os.path.join(class_path, "*.jpg")) + glob.glob(os.path.join(class_path, "*.png"))
        results_by_class[class_name] = []
        
        print(f"\\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {class_name.upper()} ({len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π):")
        
        correct = 0
        confidences = []
        
        for img_path in images[:10]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            results = model.predict(img_path)
            
            if hasattr(results[0], 'probs') and results[0].probs is not None:
                probs = results[0].probs
                pred_class = model.names[probs.top1]
                confidence = probs.top1conf.item()
                
                is_correct = (pred_class == class_name)
                if is_correct:
                    correct += 1
                
                confidences.append(confidence)
                results_by_class[class_name].append({
                    'true_class': class_name,
                    'pred_class': pred_class,
                    'confidence': confidence,
                    'correct': is_correct
                })
        
        if len(images) > 0:
            accuracy = correct / min(10, len(images))
            avg_confidence = np.mean(confidences) if confidences else 0
            print(f"   ‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%}")
            print(f"   üìà –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.1%}")
            print(f"   üîç –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {correct}/{min(10, len(images))}")

def plot_confidence_distribution(model_path, test_dir):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    model = YOLO(model_path)
    
    plt.figure(figsize=(12, 8))
    
    for i, class_name in enumerate(["normal", "clavicle_fracture", "foreign_body"]):
        class_path = os.path.join(test_dir, class_name)
        if not os.path.exists(class_path):
            continue
            
        images = glob.glob(os.path.join(class_path, "*.jpg")) + glob.glob(os.path.join(class_path, "*.png"))
        confidences = []
        
        for img_path in images[:20]:  # –ë–µ—Ä–µ–º –¥–æ 20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –∫–ª–∞—Å—Å
            results = model.predict(img_path)
            if hasattr(results[0], 'probs') and results[0].probs is not None:
                confidence = results[0].probs.top1conf.item()
                confidences.append(confidence)
        
        if confidences:
            plt.hist(confidences, alpha=0.7, label=class_name, bins=10)
    
    plt.xlabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ –∫–ª–∞—Å—Å–∞–º')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.show()

def show_training_results():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è"""
    print("\\nüìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 40)
    
    # –ò—â–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
    results_plots = glob.glob("runs/classify/train/*.png")
    
    if results_plots:
        print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –≥—Ä–∞—Ñ–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è:")
        for plot in results_plots:
            print(f"   üìä {os.path.basename(plot)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        results_png = "runs/classify/train/results.png"
        if os.path.exists(results_png):
            try:
                from IPython.display import Image, display
                display(Image(filename=results_png))
                print("\\nüñºÔ∏è  –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è:")
            except:
                print("\\nüìä –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: runs/classify/train/results.png")
    else:
        print("‚ùå –ì—Ä–∞—Ñ–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def main():
    model_path = "runs/classify/train/weights/best.pt"
    test_dir = "data/images/test"
    
    if not os.path.exists(model_path):
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
        return
    
    show_training_results()
    analyze_predictions(model_path, test_dir)
    plot_confidence_distribution(model_path, test_dir)

if __name__ == "__main__":
    main()
