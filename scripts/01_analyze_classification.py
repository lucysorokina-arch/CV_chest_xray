#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò chest X-ray
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(script_dir)
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from utils.data_utils import setup_dataset_structure
from utils.data_balancer import DataBalancer, check_dataset_quality
from utils.imbalance_utils import ImbalanceHandler

def setup_classification_structure(base_path="./data"):
    """Create classification dataset structure"""
    folders = [
        "images/train/normal",
        "images/train/clavicle_fracture", 
        "images/train/foreign_body",
        "images/val/normal",
        "images/val/clavicle_fracture",
        "images/val/foreign_body",
        "images/test/normal",
        "images/test/clavicle_fracture",
        "images/test/foreign_body"
    ]
    
    for folder in folders:
        os.makedirs(os.path.join(base_path, folder), exist_ok=True)
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò —Å–æ–∑–¥–∞–Ω–∞")
    return True

def main():
    print("üéØ –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –î–õ–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    setup_classification_structure('./data')
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–µ—Ä–∞
        balancer = DataBalancer('./data')
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        current_counts = balancer.analyze_current_balance()
        
        # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
        balancer.recommend_actions(current_counts)
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
        is_quality_ok = check_dataset_quality('./data')
        
        # 5. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
        handler = ImbalanceHandler('./data/labels/train')
        strategy = handler.get_imbalance_strategy()
        weights = handler.calculate_class_weights()
        
        print(f"\nüéØ –°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò: {strategy}")
        print(f"‚öñÔ∏è –í–ï–°–ê –ö–õ–ê–°–°–û–í: {weights}")
        
        # 6. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò
        from utils.data_utils import create_data_yaml
        create_data_yaml('configs/classification_config.yaml', 'moderate_imbalance')
        
        print(f"\nüìã –†–ï–ñ–ò–ú: –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("üí° –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–∞—Ç–æ–ª–æ–≥–∏—é –Ω–∞ –≤—Å–µ–º —Å–Ω–∏–º–∫–µ")
        
        if not is_quality_ok:
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   1. –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø–∞–ø–∫–∞–º –∫–ª–∞—Å—Å–æ–≤:")
            print("      data/images/train/normal/")
            print("      data/images/train/clavicle_fracture/") 
            print("      data/images/train/foreign_body/")
            print("   2. –î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ù–ï –Ω—É–∂–Ω—ã —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—Ç–∫–∏ .txt")
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    main()
