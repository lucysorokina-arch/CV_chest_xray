#!/usr/bin/env python3
"""
üöÄ CHEST X-RAY FULL PIPELINE
üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:

üîπ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞
üîπ –≠–¢–ê–ü–´:
   1. üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   2. ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   3. üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   4. üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫
   5. ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

üîπ –ö–õ–ê–°–°–´: normal, clavicle_fracture, foreign_body
üîπ –î–ê–ù–ù–´–ï: 91 —Å–Ω–∏–º–æ–∫ (71 train, 9 val, 11 test)
üîπ –ú–û–î–ï–õ–¨: YOLOv8n-cls (transfer learning)

üöÄ –ó–ê–ü–£–°–ö:
!python scripts/10_run_full_pipeline.py

‚è±Ô∏è  –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ: 5-15 –º–∏–Ω—É—Ç (CPU)
‚Ä¢ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω: 15-25 –º–∏–Ω—É—Ç

üìÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´:
‚Ä¢ –ú–æ–¥–µ–ª—å: runs/classify/train/weights/best.pt
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏: runs/classify/train/results.png
‚Ä¢ –õ–æ–≥–∏: runs/classify/train/
‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: runs/classify/predict/
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print(f"\\nüéØ {description}")
    print(f"üöÄ –í—ã–ø–æ–ª–Ω—è—é: {command}")
    print("-" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True,
            check=False  # –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        )
        
        if result.returncode == 0:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {description}")
            # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if result.stdout:
                lines = result.stdout.strip().split('\\n')
                for line in lines[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫
                    if line.strip():
                        print(f"   üìù {line}")
        else:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –≤ {description}")
            if result.stderr:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.stderr[:200]}...")
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ {description}: {e}")
        return False

def check_prerequisites():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–• –£–°–õ–û–í–ò–ô")
    print("=" * 50)
    
    checks = [
        ("–ü–∞–ø–∫–∞ data/images/", os.path.exists("data/images")),
        ("–°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö", os.path.exists("scripts/01_analyze_classification.py")),
        ("–°–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è", os.path.exists("scripts/02_classify.py")),
        ("–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", os.path.exists("scripts/08_test_predictions.py")),
        ("data.yaml –∫–æ–Ω—Ñ–∏–≥", os.path.exists("data.yaml")),
    ]
    
    all_ok = True
    for check_name, check_result in checks:
        status = "‚úÖ" if check_result else "‚ùå"
        print(f"{status} {check_name}")
        if not check_result:
            all_ok = False
    
    return all_ok

def run_full_pipeline():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω"""
    print("üéØ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê CHEST X-RAY CLASSIFICATION")
    print("=" * 65)
    print("üìã –≠—Ç–∞–ø—ã –ø–∞–π–ø–ª–∞–π–Ω–∞:")
    print("   1. üìä –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("   2. ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    print("   3. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏") 
    print("   4. üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("   5. ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
    print("=" * 65)
    
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º prerequisites
    if not check_prerequisites():
        print("\\n‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("   - –î–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ data/images/")
        print("   - –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ scripts/")
        print("   - –§–∞–π–ª data.yaml —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    print(f"\\n‚è∞ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã: {time.strftime('%H:%M:%S')}")
    
    # –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    print("\\n" + "="*60)
    print("1Ô∏è‚É£  –≠–¢–ê–ü: –ê–ù–ê–õ–ò–ó –ò –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•")
    print("="*60)
    
    stage1_commands = [
        ("python scripts/01_analyze_classification.py", "–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤"),
        ("python scripts/07_check_data.py", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö"),
    ]
    
    for cmd, desc in stage1_commands:
        if not run_command(cmd, desc):
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ {desc}")
            return
    
    # –≠–¢–ê–ü 2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\\n" + "="*60)
    print("2Ô∏è‚É£  –≠–¢–ê–ü: –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—É—á–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ
    if os.path.exists("runs/classify/train/weights/best.pt"):
        print("‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ –æ–±—É—á–µ–Ω–∞! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø –æ–±—É—á–µ–Ω–∏—è.")
        print("üí° –î–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è —É–¥–∞–ª–∏—Ç–µ –ø–∞–ø–∫—É: runs/classify/train/")
    else:
        stage2_success = run_command(
            "python scripts/02_classify.py", 
            "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ YOLOv8 –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        )
        if not stage2_success:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —ç—Ç–∞–ø—ã.")
            return
    
    # –≠–¢–ê–ü 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\\n" + "="*60)
    print("3Ô∏è‚É£  –≠–¢–ê–ü: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò")
    print("="*60)
    
    stage3_commands = [
        ("python scripts/08_test_predictions.py --comprehensive", "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"),
        ("python scripts/04_predict.py --model runs/classify/train/weights/best.pt --source data/images/test/normal/ --conf 0.3", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–Ω–∏–º–∫–∞—Ö"),
    ]
    
    for cmd, desc in stage3_commands:
        run_command(cmd, desc)  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –≠–¢–ê–ü 4: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\\n" + "="*60)
    print("4Ô∏è‚É£  –≠–¢–ê–ü: –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("="*60)
    
    stage4_commands = [
        ("python scripts/09_analyze_results.py", "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è"),
    ]
    
    for cmd, desc in stage4_commands:
        run_command(cmd, desc)
    
    # –≠–¢–ê–ü 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    print("\\n" + "="*60)
    print("5Ô∏è‚É£  –≠–¢–ê–ü: –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if os.path.exists("runs/classify/train/weights/best.pt"):
        model_size = os.path.getsize("runs/classify/train/weights/best.pt") / 1024 / 1024
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {model_size:.1f} MB")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        test_classes = ['normal', 'clavicle_fracture', 'foreign_body']
        for class_name in test_classes:
            test_dir = f"data/images/test/{class_name}"
            if os.path.exists(test_dir):
                images = list(Path(test_dir).glob("*.jpg")) + list(Path(test_dir).glob("*.png"))
                if images:
                    test_image = images[0]
                    run_command(
                        f'python scripts/04_predict.py --model runs/classify/train/weights/best.pt --source "{test_image}" --conf 0.3',
                        f"–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∞—Å—Å–µ: {class_name}"
                    )
                    break  # –¢–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–∞ –∫–ª–∞—Å—Å
    
    # –ò—Ç–æ–≥–∏
    end_time = time.time()
    duration = end_time - start_time
    print("\\n" + "="*60)
    print("üéâ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù!")
    print("="*60)
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥ ({duration/60:.1f} –º–∏–Ω—É—Ç)")
    print(f"üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {time.strftime('%H:%M:%S')}")
    
    print("\\nüìÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    results = [
        f"‚Ä¢ –ú–æ–¥–µ–ª—å: runs/classify/train/weights/best.pt",
        f"‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è: runs/classify/train/results.png", 
        f"‚Ä¢ –õ–æ–≥–∏: runs/classify/train/",
        f"‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: runs/classify/predict/",
        f"‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: data.yaml"
    ]
    
    for result in results:
        print(f"  {result}")
    
    print("\\nüöÄ –î–ê–õ–¨–ù–ï–ô–®–ò–ï –î–ï–ô–°–¢–í–ò–Ø:")
    next_steps = [
        "‚Ä¢ –î–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: python scripts/04_predict.py --model best.pt --source your_image.jpg",
        "‚Ä¢ –î–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: —É–¥–∞–ª–∏—Ç–µ –ø–∞–ø–∫—É runs/classify/train/ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞",
        "‚Ä¢ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞: python scripts/09_analyze_results.py",
        "‚Ä¢ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: python scripts/08_test_predictions.py --comprehensive"
    ]
    
    for step in next_steps:
        print(f"  {step}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        run_full_pipeline()
    except KeyboardInterrupt:
        print("\\n‚ùå –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()
