#!/usr/bin/env python3
"""
–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö NIH ChestX-ray –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import pandas as pd
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(script_dir)
if project_root not in sys.path:
    sys.path.insert(0, project_root)

def ensure_nih_metadata():
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö NIH"""
    metadata_path = "data/nih/Data_Entry_2017.csv"
    os.makedirs(os.path.dirname(metadata_path), exist_ok=True)
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if os.path.exists(metadata_path):
        print("üìÅ –§–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å...")
        df = validate_and_read_metadata(metadata_path)
        if df is not None:
            return df
    
    print("üìù –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–µ–º–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NIH...")
    return create_realistic_demo_metadata(metadata_path)

def validate_and_read_metadata(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —á–∏—Ç–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(file_path, 'r', encoding='utf-8') as f:
            first_lines = [f.readline() for _ in range(3)]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ HTML
        if any('<!DOCTYPE' in line or '<html' in line for line in first_lines):
            print("‚ùå –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç HTML, –∞ –Ω–µ CSV –¥–∞–Ω–Ω—ã–µ")
            return None
        
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ CSV
        df = pd.read_csv(file_path, nrows=5)  # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['Image Index', 'Finding Labels']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            return None
        
        # –ï—Å–ª–∏ –≤—Å–µ –æ–∫, —á–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª
        df = pd.read_csv(file_path)
        print(f"‚úÖ –§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω! –°—Ç—Ä–æ–∫: {len(df)}")
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

def create_realistic_demo_metadata(file_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NIH"""
    print("üéØ –°–û–ó–î–ê–ï–ú –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –î–ï–ú–û –î–ê–ù–ù–´–ï NIH CHESTX-RAY...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ—á–Ω–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º NIH ChestX-ray14
    total_images = 200
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ
    findings_distribution = {
        'No Finding': 140,      # 70% - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏
        'Pneumonia': 20,        # 10%
        'Cardiomegaly': 15,     # 7.5%
        'Effusion': 12,         # 6%
        'Nodule': 8,            # 4%
        'Atelectasis': 5        # 2.5%
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö findings
    all_findings = []
    for finding, count in findings_distribution.items():
        all_findings.extend([finding] * count)
    
    demo_data = {
        'Image Index': [f'{i:08d}_000.png' for i in range(1, total_images + 1)],
        'Finding Labels': all_findings,
        'Follow-up #': [i % 6 for i in range(total_images)],
        'Patient ID': [100000 + i for i in range(total_images)],
        'Patient Age': [20 + (i * 37) % 60 for i in range(total_images)],  # –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç 20-80
        'Patient Gender': ['M' if i % 2 == 0 else 'F' for i in range(total_images)],
        'View Position': ['PA' if i % 3 == 0 else 'AP' for i in range(total_images)],
        'OriginalImage[Width': [1024] * total_images,
        'OriginalImage[Height': [1024] * total_images,
        'OriginalImagePixelSpacing[x': [0.2] * total_images,
        'OriginalImagePixelSpacing[y': [0.2] * total_images,
    }
    
    df = pd.DataFrame(demo_data)
    df.to_csv(file_path, index=False)
    
    print(f"‚úÖ –î–µ–º–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã! –°—Ç—Ä–æ–∫: {len(df)}")
    print("üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–õ–ê–°–°–û–í:")
    for finding, count in findings_distribution.items():
        print(f"   {finding}: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ({count/total_images*100:.1f}%)")
    
    return df

def analyze_and_filter_data(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    print("\nüìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• NIH:")
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df):,}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–æ–≤
    print("\nüéØ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–õ–ê–°–°–û–í:")
    class_distribution = df['Finding Labels'].value_counts()
    for finding, count in class_distribution.items():
        percentage = count / len(df) * 100
        print(f"   {finding}: {count} ({percentage:.1f}%)")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏
    normal_images = df[df['Finding Labels'] == 'No Finding']
    print(f"\nüìà –ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤ (No Finding): {len(normal_images):,}")
    
    if len(normal_images) == 0:
        print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤!")
        print("   –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–Ω–∏–º–∫–æ–≤ –∫–∞–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–ª—è –¥–µ–º–æ")
        normal_images = df.head(50)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    output_file = "data/nih/normal_images_list.txt"
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    normal_images['Image Index'].to_csv(output_file, index=False, header=False)
    print(f"‚úÖ –°–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∞—Ö
    class_info_file = "data/nih/class_distribution.csv"
    class_distribution.to_csv(class_info_file, header=['Count'])
    print(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {class_info_file}")
    
    return normal_images



    with open('data/nih/README.md', 'w', encoding='utf-8') as f:
        f.write(docs_content)
    print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: data/nih/README.md")

def main():
    print("üìä –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• NIH CHESTX-RAY")
    print("=" * 50)
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    df = ensure_nih_metadata()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    normal_images = analyze_and_filter_data(df)
    
  
    
