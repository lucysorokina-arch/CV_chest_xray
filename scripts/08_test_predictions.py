#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –º–æ–¥–µ–ª–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import glob
import argparse
from ultralytics import YOLO

def find_models():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    print("üîç –ü–û–ò–°–ö –û–ë–£–ß–ï–ù–ù–´–• –ú–û–î–ï–õ–ï–ô...")
    model_paths = glob.glob("runs/**/best.pt", recursive=True)
    
    if not model_paths:
        print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
        return []
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏:")
    for i, model_path in enumerate(model_paths):
        print(f"   {i+1}. {model_path}")
    
    return model_paths

def find_images():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("\\nüîç –ü–û–ò–°–ö –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô...")
    image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.JPG', '*.JPEG', '*.PNG']
    all_images = []
    
    for ext in image_extensions:
        all_images.extend(glob.glob(f"data/images/**/{ext}", recursive=True))
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    all_images = sorted(list(set(all_images)))
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    test_images = [img for img in all_images if 'test' in img.lower()]
    train_images = [img for img in all_images if 'train' in img.lower()]
    val_images = [img for img in all_images if 'val' in img.lower()]
    
    if test_images:
        print("   üéØ –¢–µ—Å—Ç–æ–≤—ã–µ: {} —Ñ–∞–π–ª–æ–≤".format(len(test_images)))
    if train_images:
        print("   üìö –û–±—É—á–∞—é—â–∏–µ: {} —Ñ–∞–π–ª–æ–≤".format(len(train_images)))
    if val_images:
        print("   üìä –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ: {} —Ñ–∞–π–ª–æ–≤".format(len(val_images)))
    
    return all_images

def test_single_prediction(model_path, image_path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –º–æ–¥–µ–ª—å –Ω–∞ –æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    print(f"\\nüéØ –¢–ï–°–¢: {os.path.basename(model_path)} ‚Üí {os.path.basename(image_path)}")
    print("=" * 60)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        model = YOLO(model_path)
        
        # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        results = model.predict(
            source=image_path,
            save=True,
            exist_ok=True
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if hasattr(results[0], 'probs') and results[0].probs is not None:
            probs = results[0].probs
            top1_idx = probs.top1
            top1_conf = probs.top1conf.item()
            top1_class = results[0].names[top1_idx]
            
            print(f"üèÜ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï: {top1_class}")
            print(f"üìà –£–í–ï–†–ï–ù–ù–û–°–¢–¨: {top1_conf:.2%}")
            
            print("\\nüìä –í–ï–†–û–Ø–¢–ù–û–°–¢–ò –ö–õ–ê–°–°–û–í:")
            for class_id, class_name in results[0].names.items():
                prob = probs.data[class_id].item()
                print(f"   {class_name}: {prob:.2%}")
                
        else:
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")

def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–µ–ª–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    models = find_models()
    images = find_images()
    
    if not models or not images:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
    model_path = models[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    test_images = [img for img in images if 'test' in img.lower()][:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö
    
    print(f"\\nüöÄ –¢–ï–°–¢–ò–†–£–ï–ú –ú–û–î–ï–õ–¨: {os.path.basename(model_path)}")
    
    for i, image_path in enumerate(test_images, 1):
        print(f"\\nüì∏ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï {i}/{len(test_images)}:")
        test_single_prediction(model_path, image_path)

def main():
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--comprehensive', action='store_true', help='–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--model', type=str, help='–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏')
    parser.add_argument('--image', type=str, help='–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é')
    
    args = parser.parse_args()
    
    if args.comprehensive:
        run_comprehensive_test()
    elif args.model and args.image:
        test_single_prediction(args.model, args.image)
    else:
        print("üéØ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:")
        print("  python 08_test_predictions.py --comprehensive  # –ê–≤—Ç–æ—Ç–µ—Å—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("  python 08_test_predictions.py --model path/to/model.pt --image path/to/image.jpg  # –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã")

if __name__ == "__main__":
    main()
