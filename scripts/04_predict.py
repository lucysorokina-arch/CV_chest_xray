#!/usr/bin/env python3
"""
Prediction script for chest X-ray pathology detection
"""

import sys
import os
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(script_dir)
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from ultralytics import YOLO

def main():
    parser = argparse.ArgumentParser(description='Chest X-Ray Prediction')
    parser.add_argument('--model', type=str, required=True, help='Path to model weights')
    parser.add_argument('--source', type=str, required=True, help='Path to image or directory')
    parser.add_argument('--conf', type=float, default=0.5, help='Confidence threshold')
    
    args = parser.parse_args()
    
    print("üéØ –ó–ê–ü–£–°–ö –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if not os.path.exists(args.model):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.model}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    if not os.path.exists(args.source):
        print(f"‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.source}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    print(f"üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: {args.model}")
    model = YOLO(args.model)
    
    # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {args.source}")
    results = model.predict(
        source=args.source,
        conf=args.conf,
        save=True,
        exist_ok=True
    )
    
    print("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for i, result in enumerate(results):
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}:")
        if hasattr(result, 'probs'):
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
            if result.probs is not None:
                print("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤:")
                for class_name, prob in zip(result.names.values(), result.probs.data.tolist()):
                    print(f"   {class_name}: {prob:.2%}")
        else:
            # –î–µ—Ç–µ–∫—Ü–∏—è
            if len(result.boxes) > 0:
                print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
                for box in result.boxes:
                    class_id = int(box.cls[0])
                    confidence = box.conf[0]
                    class_name = result.names[class_id]
                    print(f"   {class_name}: {confidence:.2%}")
            else:
                print("   –û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

if __name__ == "__main__":
    main()
